 // using try and catch
        // try {
        //     $validator = Validator::make($request->all(), [
        //         'title' => 'required|string|max:30|unique:tasks,title',
        //         'created_by' => 'required|string',
        //         'description' => 'nullable|string|max:255',
        //         'assigned_at' => 'nullable|date',
        //     ]);

        //     if ($validator->fails()) {
        //         return response()->json([
        //             'errors' => $validator->errors()
        //         ], 422);
        //     }
        // } catch (\Exception $e) {
        //     return response()->json([
        //         'error' => 'An error occurred while validating the request.'
        //     ], 500);
        // }

        //         [
        //     'title' => 'required|string|max:30|unique:tasks,title',
        //     'created_by' => 'required|string',
        //     'description' => 'nullable|string|max:255',
        //     'assigned_at' => 'nullable|date',
        // ]



        <?php
namespace App\Http\Controllers;

use App\Models\Task;
use Illuminate\Http\Request;
use Illuminate\Http\Response;
use Illuminate\Support\Facades\Validator;
use App\Http\Requests\TaskRequest;

class TaskController extends Controller
{
  public function index()
{
    $tasks = Task::all();
   return view('tasks', compact('tasks'));  // If file is tasks.blade.php
   return response()->json([
            
            'data' => $tasks,
        ], 200);


}


    public function store(TaskRequest $request)
    {
         $validator = Validator::make($request->all(), 
        
    );

        if ($validator->fails()) {
            return response()->json([
                'errors' => $validator->errors()
            ], 422);
        }

        $task = Task::create($validated);

        return response()->json([
            'message' => 'Task created successfully',
            'data' => $task,
        ], 201);
    }

  
    public function update(Request $request, $id)
    {
        $task = Task::findOrFail($id);

        $request->validate([
            'title' => 'required|string|unique:tasks,title,' . $task->id,
            'created_by' => 'required|string',
            'description' => 'nullable|string|max:255',
            'assigned_at' => 'nullable|date',
        ]);

        $task->update([
            'title' => $request->title,
            'description' => $request->description,
            'assigned_at' => $request->assigned_at,
            'created_by' => $request->created_by,
        ]);

        return response()->json([
            'message' => 'Task updated successfully',
            'data' => $task,
        ]);
    }

    
    public function destroy($id)
    {
        $task = Task::findOrFail($id);
        $task->delete();

        return response()->json([
            'message' => 'Task deleted successfully',
        ]);
    }

    public function show($id)
    {
        $task = Task::findOrFail($id);
        if( !$task) {
            return response()->json(['message' => 'Task not found'], 404);
        }
        return response()->json([
            'data' => $task,
        ]);
    }
}

public function login(Request $request)
{
    // Validate inputs properly
    $validator = Validator::make($request->all(), [
        'first_name' => 'required|string|max:255',
        'password' => 'required|string|min:8',
    ]);

    if ($validator->fails()) {
        return response()->json(['errors' => $validator->errors()], 422);
    }

    // Attempt to find user by first_name (NOT recommended in production)
    $user = User::where('first_name', $request->first_name)->first();

    // Check password
    if ($user && Hash::check($request->password, $user->password)) {
        Auth::login($user); // Logs the user in

        return response()->json([
            'data' => $user->makeHidden(['password', 'remember_token']),
            'message' => 'Login successful',
        ], 200);
    }

    // If login fails
    return response()->json([
        'error' => 'Unauthorized - Invalid credentials',
    ], 401);
}

{
    "country_name": "Aric",
    "states": [
        {
            "id": 10,
            "state_name": "324234"
        },
        {
            "id":11,
            "state_name": "234"
        },
        {
            "id": 12,
            "state_name": "32434"
        },
        
        {
            
            "state_name": "xyz"
        }

    ]
}
{
    "state_name": "Arsc",
    "country_id": 1,
    "cities": [
        {
            "id": 2,

            "city_name": "123"
        },
        {
            "id": 3,
            
            "city_name": "1234"
        },
        {
            "id": 4,

      
            "city_name": "ffdfddf"
        },
        
        {
            "id": 5,

            
            "city_name": "xfdfyzf"
        }

    ]
}